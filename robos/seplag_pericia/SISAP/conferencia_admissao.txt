MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Control}({A}){Control}({C})''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: True
Clipboard.GetText Text=> unidade
IF NotContains(unidade, $'''Lista de RESTRICAO''', True) THEN
    Display.ShowMessageDialog.ShowMessage Title: $'''verificar tela do usuário''' Message: $'''determinar qual caminho anterior à da seleção de unidade''' Icon: Display.Icon.None Buttons: Display.Buttons.OK DefaultButton: Display.DefaultButton.Button1 IsTopMost: False ButtonPressed=> ButtonPressed2
END
WAIT 2
# seleção da unidade SEPLAG
Text.SplitText.Split Text: unidade StandardDelimiter: Text.StandardDelimiter.NewLine DelimiterTimes: 1 Result=> unidade
LOOP FOREACH linha IN unidade
    IF Contains(linha, $'''1981-00000099''', True) THEN
        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''x{Return}''' DelayBetweenKeystrokes: 100 SendTextAsHardwareKeys: True
        EXIT LOOP
    END
    MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Tab}''' DelayBetweenKeystrokes: 40 SendTextAsHardwareKeys: True
END
WAIT 2
/# PESQUISA DADOS SERVIDOR SISAP
#/
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Tab}{Tab}{Tab}{Tab}{Tab}X{Enter}''' DelayBetweenKeystrokes: 100 SendTextAsHardwareKeys: True
/# DADOS FUNCIONAIS
#/
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''08{Enter}''' DelayBetweenKeystrokes: 100 SendTextAsHardwareKeys: True
/# MASP INTERESSADO
#/
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''%masp_interessado%{Enter}''' DelayBetweenKeystrokes: 100 SendTextAsHardwareKeys: True
WAIT 2
/# SELECIONAR NÚMERO DE ADMISSÃO
#/
Clipboard.Clear _
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Escape}''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: False
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Control}({A}){Control}({C})''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: False
Clipboard.GetText Text=> selecao_admissao
IF IsEmpty(selecao_admissao[13]) THEN
    MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''X{Return}''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: True
ELSE
    Text.CropText.CropTextBetweenFlags Text: selecao_admissao FromFlag: $'''------------------------------------------------------------------------''' ToFlag: $'''Comando''' IgnoreCase: False CroppedText=> selecao_admissao IsFlagFound=> IsFlagFound3
    Text.CropText.CropTextAfterFlag Text: selecao_admissao FromFlag: $'''(''' IgnoreCase: False CroppedText=> selecao_admissao IsFlagFound=> IsFlagFound4
    Text.SplitText.Split Text: selecao_admissao StandardDelimiter: Text.StandardDelimiter.NewLine DelimiterTimes: 1 Result=> selecao_admissao
    SET count_selecao TO 0
    LOOP FOREACH linha_selecao_adm IN selecao_admissao
        Text.GetSubtext.GetSubtext Text: linha_selecao_adm CharacterPosition: 0 NumberOfChars: 20 Subtext=> linha_selecao_adm
        IF Contains(linha_selecao_adm, admissao_servidor, True) THEN
            MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''x{Return}''' DelayBetweenKeystrokes: 100 SendTextAsHardwareKeys: True
            EXIT LOOP
        END
        MouseAndKeyboard.SendKeys.FocusAndSendKeys TextToSend: $'''{Tab}''' DelayBetweenKeystrokes: 100 SendTextAsHardwareKeys: True
        Variables.IncreaseVariable Value: count_selecao IncrementValue: 1
    END
END
IF count_selecao = 0 THEN
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''admissão não localizada''' Column: $'''W''' Row: linha_loop
    EXIT FUNCTION
END
# Coleta e tabulação dos dados da admissão
Clipboard.Clear _
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Escape}''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: False
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Control}({A}){Control}({C})''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: True
Clipboard.GetText Text=> datas_admissao
Text.CropText.CropTextBetweenFlags Text: datas_admissao FromFlag: $''' Dt.Fim Efet.''' ToFlag: $'''_ Cod.Recebimento''' IgnoreCase: False CroppedText=> datas_admissao IsFlagFound=> IsFlagFound
Text.CropText.CropTextBetweenFlags Text: datas_admissao FromFlag: $'''------------------------------------------------------------------------------''' ToFlag: $'''------------------------------------------------------------------------------''' IgnoreCase: False CroppedText=> datas_admissao IsFlagFound=> IsFlagFound
Text.SplitText.Split Text: datas_admissao StandardDelimiter: Text.StandardDelimiter.NewLine DelimiterTimes: 1 Result=> datas_admissao
Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: 0 List: datas_admissao
DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateOnly CurrentDateTime=> hoje
Text.ConvertDateTimeToText.FromDateTime DateTime: hoje StandardFormat: Text.WellKnownDateTimeFormat.ShortDate Result=> hoje
Text.GetSubtext.GetSubtext Text: data_emissao_atestado CharacterPosition: 0 NumberOfChars: 2 Subtext=> dia_atestado
Text.GetSubtext.GetSubtext Text: data_emissao_atestado CharacterPosition: 2 NumberOfChars: 2 Subtext=> mes_atestado
Text.GetSubtext.GetSubtext Text: data_emissao_atestado CharacterPosition: 4 NumberOfChars: 4 Subtext=> ano_atestado
SET data_emissao_atestado TO $'''%dia_atestado%/%mes_atestado%/%ano_atestado%'''
DISABLE Text.ConvertTextToDateTime.ToDateTime Text: data_emissao_atestado DateTime=> data_emissao_atestado
LOOP FOREACH linha_datas_adm IN datas_admissao
    Text.GetSubtext.GetSubtext Text: linha_datas_adm CharacterPosition: 53 NumberOfChars: 10 Subtext=> data_inicio_adm
    Text.Replace Text: data_inicio_adm TextToFind: $'''.''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''/''' ActivateEscapeSequences: False Result=> data_inicio_adm
    DISABLE Text.ConvertTextToDateTime.ToDateTime Text: data_inicio_adm DateTime=> data_inicio_adm
    Text.GetSubtext.GetSubtext Text: linha_datas_adm CharacterPosition: 66 NumberOfChars: 10 Subtext=> data_fim_adm
    IF NotContains(data_fim_adm, 20, False) THEN
        SET data_fim_adm TO hoje
    ELSE
        Text.Replace Text: data_fim_adm TextToFind: $'''.''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''/''' ActivateEscapeSequences: False Result=> data_fim_adm
        DISABLE Text.ConvertTextToDateTime.ToDateTime Text: data_fim_adm DateTime=> data_fim_adm
    END
    WebAutomation.ExecuteJavascript BrowserInstance: Browser_para_javascript Javascript: $'''function ExecuteScript() {

function DataAlternativa(dia, mes, ano) {
    this.dia = parseInt(dia, 10);
    this.mes = parseInt(mes, 10);
    this.ano = parseInt(ano, 10);
}

DataAlternativa.prototype.isMenorOuIgual = function(outro) {
    if (this.ano < outro.ano) return true;
    if (this.ano === outro.ano && this.mes < outro.mes) return true;
    if (this.ano === outro.ano && this.mes === outro.mes && this.dia <= outro.dia) return true;
    return false;
};

DataAlternativa.prototype.isMaiorOuIgual = function(outro) {
    if (this.ano > outro.ano) return true;
    if (this.ano === outro.ano && this.mes > outro.mes) return true;
    if (this.ano === outro.ano && this.mes === outro.mes && this.dia >= outro.dia) return true;
    return false;
};

function converterData(dataStr) {
    if (typeof dataStr !== \"string\") return null;
    if (dataStr.startsWith(\"%') && dataStr.endsWith('%\")) return null;

    var partes = dataStr.trim().split(\"/\");
    if (partes.length !== 3) return null;

    return {
        dia: parseInt(partes[0], 10),
        mes: parseInt(partes[1], 10),
        ano: parseInt(partes[2], 10)
    };
}

function isMaiorOuIgual(d1, d2) {
    if (d1.ano > d2.ano) return true;
    if (d1.ano === d2.ano && d1.mes > d2.mes) return true;
    if (d1.ano === d2.ano && d1.mes === d2.mes && d1.dia >= d2.dia) return true;
    return false;
}

function isMenorOuIgual(d1, d2) {
    if (d1.ano < d2.ano) return true;
    if (d1.ano === d2.ano && d1.mes < d2.mes) return true;
    if (d1.ano === d2.ano && d1.mes === d2.mes && d1.dia <= d2.dia) return true;
    return false;
}

var data_verificar_str = \"%data_emissao_atestado%\";
var data_inicio_str = \"%data_inicio_adm%\";
var data_fim_str = \"%data_fim_adm%\";

var data_verificar = converterData(data_verificar_str);
var data_inicio = converterData(data_inicio_str);
var data_fim = converterData(data_fim_str);

var resultado = \"\";

if (!data_verificar || !data_inicio || !data_fim) {
    resultado = \"Erro: Data inválida ou variável não substituída\";
} else if (isMaiorOuIgual(data_verificar, data_inicio) && isMenorOuIgual(data_verificar, data_fim)) {
    resultado = \"Dentro do intervalo\";
} else {
    resultado = \"Fora do intervalo\";
}

return resultado;


}''' Result=> Result
    IF Result = $'''Dentro do intervalo''' THEN
        EXIT FUNCTION
    END
END
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''Admissão informada fora dos intervalos de data''' Column: $'''W''' Row: linha_loop
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{F3}''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: True
MouseAndKeyboard.SendKeys.FocusAndSendKeysByTitleClass Title: terminal Class: $'''''' TextToSend: $'''{Delete}{F6}''' DelayBetweenKeystrokes: 200 SendTextAsHardwareKeys: True
EXIT FUNCTION
