Text.CropText.CropTextBetweenFlags Text: ExtractedPDFText FromFlag: $'''Licença para Tratamento de Saúde - Médicos Peritos Unidade interna''' ToFlag: $'''Referência: Processo nº''' IgnoreCase: False CroppedText=> texto_bim
Text.CropText.CropTextBetweenFlags Text: texto_bim FromFlag: $'''IDENTIFICAÇÃO DO INTERESSADO''' ToFlag: $'''OBSERVAÇÕES:''' IgnoreCase: False CroppedText=> anamnese
**REGION Registro na planilha do n° de BIMs do processo e se possui OBS
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: numero_bims Column: coluna_livre - 15 Row: linha_loop
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''N''' Column: coluna_livre - 14 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha do nome do interessado
Text.CropText.CropTextBetweenFlags Text: anamnese FromFlag: $''':''' ToFlag: $'''MASP''' IgnoreCase: False CroppedText=> nome_interessado
Text.Trim Text: nome_interessado TrimOption: Text.TrimOption.Both TrimmedText=> nome_interessado
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: nome_interessado Column: coluna_livre - 13 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha do MASP do interessado
Text.CropText.CropTextBetweenFlags Text: cabecalho FromFlag: $'''MASP/CPF: ''' ToFlag: $'''/''' IgnoreCase: False CroppedText=> masp_interessado
Text.FromNumber Number: masp_interessado DecimalPlaces: 0 UseThousandsSeparator: True FormattedNumber=> masp_interessado
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%masp_interessado%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_masp
IF caracteres_masp > 16 THEN
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''Sem MASP''' Column: coluna_livre - 12 Row: linha_loop
ELSE
    IF Contains(masp_interessado, $'''DATA''', True) THEN
        Text.Replace Text: masp_interessado TextToFind: $'''DATA''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> masp_interessado
        Text.Trim Text: masp_interessado TrimOption: Text.TrimOption.Both TrimmedText=> masp_interessado
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: masp_interessado Column: coluna_livre - 12 Row: linha_loop
    END
    Text.Replace Text: masp_interessado TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> masp_interessado
    Text.Replace Text: masp_interessado TextToFind: $''',''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> masp_interessado
    Text.Replace Text: masp_interessado TextToFind: $'''-''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> masp_interessado
    Text.Trim Text: masp_interessado TrimOption: Text.TrimOption.Both TrimmedText=> masp_interessado
    Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%masp_interessado%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_masp
    IF caracteres_dia_afastamento = 7 THEN
        Text.Pad Text: dia_afastamento PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 8 PaddedText=> masp_interessado
    END
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: masp_interessado Column: coluna_livre - 12 Row: linha_loop
END
**ENDREGION
**REGION Tratamento e registro na planilha do CPF do interessado
IF caracteres_masp > 16 THEN
    Text.GetSubtext.GetSubtextFromStartTo Text: masp_interessado NumberOfChars: 14 Subtext=> cpf_interessado
    Text.Trim Text: cpf_interessado TrimOption: Text.TrimOption.Both TrimmedText=> cpf_interessado
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: cpf_interessado Column: coluna_livre - 11 Row: linha_loop
ELSE
    Text.CropText.CropTextBetweenFlags Text: cabecalho FromFlag: $'''MASP/CPF: ''' ToFlag: $'''REGIONAL''' IgnoreCase: False CroppedText=> cpf_interessado
    Text.CropText.CropTextAfterFlag Text: cpf_interessado FromFlag: $'''/''' IgnoreCase: False CroppedText=> cpf_interessado
    IF Contains(cpf_interessado, $'''/''', True) THEN
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''Sem CPF''' Column: coluna_livre - 11 Row: linha_loop
    ELSE
        Text.Trim Text: cpf_interessado TrimOption: Text.TrimOption.Both TrimmedText=> cpf_interessado
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: cpf_interessado Column: coluna_livre - 11 Row: linha_loop
    END
END
**ENDREGION
**REGION Tratamento e registro na planilha da cargo do interessado
Text.CropText.CropTextAfterFlag Text: ExtractedPDFText FromFlag: $'''Cargo atual:''' IgnoreCase: True CroppedText=> cargo_interessado
Text.CropText.CropTextBeforeFlag Text: cargo_interessado ToFlag: $'''NÚCLEO REGIONAL''' IgnoreCase: True CroppedText=> cargo_interessado
Text.Trim Text: cargo_interessado TrimOption: Text.TrimOption.Both TrimmedText=> cargo_interessado
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: cargo_interessado Column: coluna_livre - 10 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha do CRM do Perito
Text.CropText.CropTextAfterFlag Text: texto_bim FromFlag: $'''CRM do médico(a) perito(a): ''' IgnoreCase: False CroppedText=> CRM_perito
Text.CropText.CropTextBeforeFlag Text: CRM_perito ToFlag: $'''PARA USO''' IgnoreCase: True CroppedText=> CRM_perito
IF IsEmpty(CRM_perito) THEN
    Text.CropText.CropTextAfterFlag Text: texto_bim FromFlag: $'''CRM do médico(a) perito(a): CRMMG:''' IgnoreCase: False CroppedText=> CRM_perito
    Text.CropText.CropTextBeforeFlag Text: CRM_perito ToFlag: $'''PARA USO''' IgnoreCase: True CroppedText=> CRM_perito
    Text.Replace Text: CRM_perito TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_perito
    Text.Trim Text: CRM_perito TrimOption: Text.TrimOption.Both TrimmedText=> CRM_perito
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_perito Column: coluna_livre - 9 Row: linha_loop
ELSE IF Contains(CRM_perito, $'''CRMMG:''', False) THEN
    Text.CropText.CropTextAfterFlag Text: CRM_perito FromFlag: $'''CRMMG:''' IgnoreCase: False CroppedText=> CRM_perito
    Text.Replace Text: CRM_perito TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_perito
    Text.Trim Text: CRM_perito TrimOption: Text.TrimOption.Both TrimmedText=> CRM_perito
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_perito Column: coluna_livre - 9 Row: linha_loop
ELSE
    Text.Replace Text: CRM_perito TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_perito
    Text.Trim Text: CRM_perito TrimOption: Text.TrimOption.Both TrimmedText=> CRM_perito
    Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_perito Column: coluna_livre - 9 Row: linha_loop
END
**ENDREGION
**REGION Tratamento e registro na planilha do CRM do atestado
Text.CropText.CropTextBetweenFlags Text: anamnese FromFlag: $'''CRM:''' ToFlag: $'''.''' IgnoreCase: False CroppedText=> CRM_atestado
Text.Trim Text: CRM_atestado TrimOption: Text.TrimOption.Both TrimmedText=> CRM_atestado
IF IsEmpty(CRM_atestado) THEN
    Text.CropText.CropTextBetweenFlags Text: anamnese FromFlag: $'''CRMMG:''' ToFlag: $'''.''' IgnoreCase: False CroppedText=> CRM_atestado
    Text.Trim Text: CRM_atestado TrimOption: Text.TrimOption.Both TrimmedText=> CRM_atestado
    IF Contains(CRM_atestado, $'''MG''', True) THEN
        Text.Replace Text: CRM_atestado TextToFind: $'''MG''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Replace Text: CRM_atestado TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Trim Text: CRM_atestado TrimOption: Text.TrimOption.Both TrimmedText=> CRM_atestado
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_atestado Column: coluna_livre - 8 Row: linha_loop
    ELSE
        Text.Replace Text: CRM_atestado TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Trim Text: CRM_atestado TrimOption: Text.TrimOption.Both TrimmedText=> CRM_atestado
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_atestado Column: coluna_livre - 8 Row: linha_loop
    END
ELSE
    IF Contains(CRM_atestado, $'''MG''', True) THEN
        Text.Replace Text: CRM_atestado TextToFind: $'''MG''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Replace Text: CRM_atestado TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Replace Text: CRM_atestado TextToFind: $'''-''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Trim Text: CRM_atestado TrimOption: Text.TrimOption.Both TrimmedText=> CRM_atestado
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_atestado Column: coluna_livre - 8 Row: linha_loop
    ELSE
        Text.Replace Text: CRM_atestado TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Replace Text: CRM_atestado TextToFind: $'''-''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> CRM_atestado
        Text.Trim Text: CRM_atestado TrimOption: Text.TrimOption.Both TrimmedText=> CRM_atestado
        Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: CRM_atestado Column: coluna_livre - 8 Row: linha_loop
    END
END
**ENDREGION
**REGION Tratamento e registro na planilha da data de início de afastamento
Text.CropText.CropTextBetweenFlags Text: anamnese FromFlag: $'''concedido de ''' ToFlag: $''' a''' IgnoreCase: True CroppedText=> data_inicio_afastamento
Text.Trim Text: data_inicio_afastamento TrimOption: Text.TrimOption.Both TrimmedText=> data_inicio_afastamento
Text.CropText.CropTextBeforeFlag Text: data_inicio_afastamento ToFlag: $'''/''' IgnoreCase: False CroppedText=> dia_afastamento
Text.Trim Text: dia_afastamento TrimOption: Text.TrimOption.Both TrimmedText=> dia_afastamento
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%dia_afastamento%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_dia_afastamento
IF caracteres_dia_afastamento = 1 THEN
    Text.Pad Text: dia_afastamento PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 2 PaddedText=> dia_afastamento
END
Text.CropText.CropTextBetweenFlags Text: data_inicio_afastamento FromFlag: $'''/''' ToFlag: $'''/''' IgnoreCase: False CroppedText=> mes_afastamento
Text.Trim Text: mes_afastamento TrimOption: Text.TrimOption.Both TrimmedText=> mes_afastamento
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%mes_afastamento%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_mes_afastamento
IF caracteres_mes_afastamento = 1 THEN
    Text.Pad Text: mes_afastamento PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 2 PaddedText=> mes_afastamento
END
Text.Reverse Text: data_inicio_afastamento ReversedText=> data_inicio_afastamento_r
Text.CropText.CropTextBeforeFlag Text: data_inicio_afastamento_r ToFlag: $'''/''' IgnoreCase: False CroppedText=> ano_afastamento_r
Text.Reverse Text: ano_afastamento_r ReversedText=> ano_afastamento
Text.Trim Text: ano_afastamento TrimOption: Text.TrimOption.Both TrimmedText=> ano_afastamento
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%ano_afastamento%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_ano_afastamento
IF caracteres_ano_afastamento = 2 THEN
    Text.Pad Text: ano_afastamento PadPosition: Text.PadPosition.Left PaddingText: 20 TotalLength: 4 PaddedText=> ano_afastamento
END
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''%dia_afastamento%%mes_afastamento%%ano_afastamento%''' Column: coluna_livre - 7 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha da data de emissão do atestado
Text.CropText.CropTextBetweenFlags Text: anamnese FromFlag: $'''datado de ''' ToFlag: $''' emitido''' IgnoreCase: False CroppedText=> data_emissao_atestado
Text.Trim Text: data_emissao_atestado TrimOption: Text.TrimOption.Both TrimmedText=> data_emissao_atestado
Text.CropText.CropTextBeforeFlag Text: data_emissao_atestado ToFlag: $'''/''' IgnoreCase: False CroppedText=> dia_emissao
Text.Trim Text: dia_emissao TrimOption: Text.TrimOption.Both TrimmedText=> dia_emissao
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%dia_emissao%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_dia_emissao
IF caracteres_dia_emissao = 1 THEN
    Text.Pad Text: dia_emissao PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 2 PaddedText=> dia_emissao
END
Text.CropText.CropTextBetweenFlags Text: data_emissao_atestado FromFlag: $'''/''' ToFlag: $'''/''' IgnoreCase: False CroppedText=> mes_emissao
Text.Trim Text: mes_emissao TrimOption: Text.TrimOption.Both TrimmedText=> mes_emissao
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%mes_emissao%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_mes_emissao
IF caracteres_mes_emissao = 1 THEN
    Text.Pad Text: mes_emissao PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 2 PaddedText=> mes_emissao
END
Text.Reverse Text: data_emissao_atestado ReversedText=> data_emissao_r
Text.CropText.CropTextBeforeFlag Text: data_emissao_r ToFlag: $'''/''' IgnoreCase: False CroppedText=> ano_emissao_r
Text.Reverse Text: ano_emissao_r ReversedText=> ano_emissao
Text.Trim Text: ano_emissao TrimOption: Text.TrimOption.Both TrimmedText=> ano_emissao
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%ano_emissao%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_ano_emissao
IF caracteres_ano_emissao = 2 THEN
    Text.Pad Text: ano_emissao PadPosition: Text.PadPosition.Left PaddingText: 20 TotalLength: 4 PaddedText=> ano_emissao
END
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''%dia_emissao%%mes_emissao%%ano_emissao%''' Column: coluna_livre - 6 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha da data de revisão do atestado
Text.CropText.CropTextBetweenFlags Text: texto_bim FromFlag: $'''Documento assinado eletronicamente''' ToFlag: $'''às''' IgnoreCase: False CroppedText=> data_revisao_atestado
Text.CropText.CropTextBetweenFlags Text: data_revisao_atestado FromFlag: $'''em''' ToFlag: $''',''' IgnoreCase: False CroppedText=> data_revisao_atestado
Text.Trim Text: data_revisao_atestado TrimOption: Text.TrimOption.Both TrimmedText=> data_revisao_atestado
Text.CropText.CropTextBeforeFlag Text: data_revisao_atestado ToFlag: $'''/''' IgnoreCase: False CroppedText=> dia_revisao
Text.Trim Text: dia_revisao TrimOption: Text.TrimOption.Both TrimmedText=> dia_revisao
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%dia_revisao%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_dia_revisao
IF caracteres_dia_revisao = 1 THEN
    Text.Pad Text: dia_revisao PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 2 PaddedText=> dia_revisao
END
Text.CropText.CropTextBetweenFlags Text: data_revisao_atestado FromFlag: $'''/''' ToFlag: $'''/''' IgnoreCase: False CroppedText=> mes_revisao
Text.Trim Text: mes_revisao TrimOption: Text.TrimOption.Both TrimmedText=> mes_revisao
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%mes_revisao%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_mes_revisao
IF caracteres_mes_revisao = 1 THEN
    Text.Pad Text: mes_revisao PadPosition: Text.PadPosition.Left PaddingText: 0 TotalLength: 2 PaddedText=> mes_revisao
END
Text.Reverse Text: data_revisao_atestado ReversedText=> data_revisao_r
Text.CropText.CropTextBeforeFlag Text: data_revisao_r ToFlag: $'''/''' IgnoreCase: False CroppedText=> ano_revisao_r
Text.Reverse Text: ano_revisao_r ReversedText=> ano_revisao
Text.Trim Text: ano_revisao TrimOption: Text.TrimOption.Both TrimmedText=> ano_revisao
Scripting.RunPowershellScript.RunPowershellScript Script: $'''# Recebe o valor da variável do Power Automate
$texto = \"%ano_revisao%\" 

# Conta os caracteres
$resultado = $texto.Length

# Retorna o resultado para o Power Automate
$resultado''' ScriptOutput=> caracteres_ano_revisao
IF caracteres_ano_revisao = 2 THEN
    Text.Pad Text: ano_revisao PadPosition: Text.PadPosition.Left PaddingText: 20 TotalLength: 4 PaddedText=> ano_revisao
END
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: $'''%dia_revisao%%mes_revisao%%ano_revisao%''' Column: coluna_livre - 5 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha dos dias solicitados
Text.CropText.CropTextBetweenFlags Text: anamnese FromFlag: $'''Período solicitado no atestado ''' ToFlag: $''' dia''' IgnoreCase: True CroppedText=> dias_solicitados
Text.Trim Text: dias_solicitados TrimOption: Text.TrimOption.Both TrimmedText=> dias_solicitados
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: dias_solicitados Column: coluna_livre - 4 Row: linha_loop
**ENDREGION
**REGION Tratamento e registro na planilha da CID do interessado
Text.CropText.CropTextAfterFlag Text: texto_bim FromFlag: $'''CID Principal:''' IgnoreCase: False CroppedText=> cid_interessado
Text.CropText.CropTextBeforeFlag Text: cid_interessado ToFlag: $'''OBSERVAÇÕES''' IgnoreCase: True CroppedText=> cid_interessado
IF Contains(cid_interessado, $'''Secundário''', True) THEN
    Text.CropText.CropTextBeforeFlag Text: cid_interessado ToFlag: $'''CID Secundário''' IgnoreCase: True CroppedText=> cid_interessado
END
IF Contains(cid_interessado, $'''Artigo''', True) THEN
    Text.CropText.CropTextBeforeFlag Text: cid_interessado ToFlag: $'''Artigo''' IgnoreCase: True CroppedText=> cid_interessado
END
Text.Replace Text: cid_interessado TextToFind: $'''.''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> cid_interessado
Text.Replace Text: cid_interessado TextToFind: $'''-''' IsRegEx: False IgnoreCase: True ReplaceWith: vazio ActivateEscapeSequences: False Result=> cid_interessado
Text.Trim Text: cid_interessado TrimOption: Text.TrimOption.Both TrimmedText=> cid_interessado
Excel.WriteToExcel.WriteCell Instance: excel_pericia Value: cid_interessado Column: coluna_livre - 3 Row: linha_loop
**ENDREGION
